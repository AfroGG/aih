package test

import (
	"fmt"

	"github.com/nsf/termbox-go"
)

func main() {
	// Initialize termbox
	err := termbox.Init()
	if err != nil {
		panic(err)
	}
	defer termbox.Close()

	// Print instructions
	instructions := "Use up and down arrow keys to move\nPress Esc to exit"
	printString(instructions, 0, 0, termbox.ColorWhite, termbox.ColorBlack)

	// Print the user input
	cursorX, cursorY := 0, 2
	printString("", cursorX, cursorY, termbox.ColorGreen, termbox.ColorBlack)

	// Loop until the user presses the escape key
	for {
		ev := termbox.PollEvent()
		switch ev.Type {
		// Handle keyboard events
		case termbox.EventKey:
			switch ev.Key {
			case termbox.KeyArrowUp:
				fmt.Println("Up key pressed")
				cursorY--
			case termbox.KeyArrowDown:
				fmt.Println("Down key pressed")
				cursorY++

				// Exit on Escape key press
			case termbox.KeyEsc:
				return
			}
			clearChar(cursorX, cursorY)
			printString(fmt.Sprintf("Last input: %v", ev.Ch), cursorX, cursorY, termbox.ColorGreen, termbox.ColorBlack)
		}
	}
}

// Function to print a string to the console
func printString(s string, x, y int, fg, bg termbox.Attribute) {
	for _, ch := range s {
		termbox.SetCell(x, y, ch, fg, bg)
		x++
	}
	termbox.Flush()
}

// Function to clear the character at the given position
func clearChar(x, y int) {
	termbox.SetCell(x, y, ' ', termbox.ColorDefault, termbox.ColorDefault)
	termbox.Flush()
}
